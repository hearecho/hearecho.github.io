<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>刷题笔记 on Road to Final</title>
    <link>https://hearecho.github.io/tags/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 刷题笔记 on Road to Final</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 13 Apr 2022 12:09:28 +0800</lastBuildDate><atom:link href="https://hearecho.github.io/tags/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>刷题笔记 双指针</title>
      <link>https://hearecho.github.io/post/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E5%8F%8C%E6%8C%87%E9%92%88/</link>
      <pubDate>Wed, 13 Apr 2022 12:09:28 +0800</pubDate>
      
      <guid>https://hearecho.github.io/post/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E5%8F%8C%E6%8C%87%E9%92%88/</guid>
      <description>​	双指针经常在数组和链表中使用。二分查找、滑动窗口、快慢指针都是双指针的变形用法。
二分查找 二分查找，主要是在有序数组中进行查找符合目标值，一般中等难度的问题都不会简单的让查找某个确定的值，而是进行变相的询问，例如询问左边界问题，左边界问题也是用的最多的一种方式。
34. 在排序数组中查找元素的第一个和最后一个位置 这道题可以使用调用两次最左位置，或者是一次最左，一次最右。两次调用最左位置，就是查找$target$和$target+1$的最左位置，这样就可以获得目标值的最左位置和最有位置。当然最右位置等于$target+1$最左位置-1。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  func searchRange(nums []int, target int) []int { // 时间复杂度的要求所以肯定是使用二分查找方法  // 我们需要查找的是上边界以及下边界  if len(nums) == 0 { return []int{-1,-1} } l := binarySearch(nums, target) h := binarySearch(nums, target + 1) if l &amp;lt; len(nums) &amp;amp;&amp;amp; nums[l] == target { return []int{l, h-1} } return []int{-1,-1} } func binarySearch(nums []int, target int) int { l,h := 0, len(nums) for l&amp;lt;h { // 由于是查找边界，所以不能是  mid := l + (h-l)/2 if nums[mid] &amp;gt;= target { h = mid } else { l = mid + 1 } } return l }   354.</description>
    </item>
    
  </channel>
</rss>
