<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Road to Final</title>
    <link>https://hearecho.github.io/tags/go/</link>
    <description>Recent content in Go on Road to Final</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 25 Feb 2022 14:12:22 +0800</lastBuildDate><atom:link href="https://hearecho.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Question</title>
      <link>https://hearecho.github.io/post/go-question/</link>
      <pubDate>Fri, 25 Feb 2022 14:12:22 +0800</pubDate>
      
      <guid>https://hearecho.github.io/post/go-question/</guid>
      <description>Go Questions 1.nil切片和空切片、零切片 nil切片指向的地址为0，而所有创建的空切片的内存地址是存在的，并且是一个固定值。
零切片就是底层数组内部数据全是零变量。说白了就是使用make初始化之后的切片。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  func compareSlice() { var s1 []int s2 := make([]int,0) s4 := make([]int,0) fmt.Printf(&amp;#34;s1 pointer:%+v, s2 pointer:%+v, s4 pointer:%+v, \n&amp;#34;, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;amp;s1)),*(*reflect.SliceHeader)(unsafe.Pointer(&amp;amp;s2)),*(*reflect.SliceHeader)(unsafe.Pointer(&amp;amp;s4))) fmt.Printf(&amp;#34;%v\n&amp;#34;, (*(*reflect.SliceHeader)(unsafe.Pointer(&amp;amp;s1))).Data==(*(*reflect.SliceHeader)(unsafe.Pointer(&amp;amp;s2))).Data) fmt.Printf(&amp;#34;%v\n&amp;#34;, (*(*reflect.SliceHeader)(unsafe.Pointer(&amp;amp;s2))).Data==(*(*reflect.SliceHeader)(unsafe.Pointer(&amp;amp;s4))).Data) } // 结果 /** s1 pointer:{Data:0 Len:0 Cap:0}, s2 pointer:{Data:824633999016 Len:0 Cap:0}, s4 pointer:{Data:824633999016 Len:0 Cap:0}, false true */   2.字符串转换为byte数组，会发生内存拷贝吗？ 严格来说，只要进行了类型的强制转换都会发生内存拷贝。所以说字符串转换为byte数组会发生内存拷贝。go的字符串也为不可变对象，在内存中的实现方式是一个只读的字节数组。字符串要想修改只能先转换为可写的数组，然后在转换为字符串。其数据结构如下：
1 2 3 4  type StringHeader struct { Data uintptr Len int }   用代码展示，可以从结果上看出，不论是从字符串转换为byte数组还是从byte数组转换为字符串，均发生内存拷贝了。</description>
    </item>
    
    <item>
      <title>Go常见错误及处理方法</title>
      <link>https://hearecho.github.io/post/gomistakes/</link>
      <pubDate>Wed, 08 Dec 2021 19:41:14 +0800</pubDate>
      
      <guid>https://hearecho.github.io/post/gomistakes/</guid>
      <description>Go常见错误 原文链接：50 Shades of Go: Traps, Gotchas, and Common Mistakes for New Golang Devs 
初级  不熟悉Go语言可能会犯的错误
 1. 大括号问题 在大多数语言中，我们都可以将大括号放在任意位置，但是Go不同，Go不能将左括号放到新的一行。同时Go和Python相同是不需要分号的（即使含有分号也不会报错）。示例如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  package main import &amp;#34;fmt&amp;#34; func main() { //error, 不能在新的一行放置新的括号，必须紧跟函数之后  fmt.Println(&amp;#34;hello there!&amp;#34;) } // 错误信息 // syntax error: unexpected semicolon or newline before {  // 正确语句 package main import &amp;#34;fmt&amp;#34; func main() { fmt.</description>
    </item>
    
  </channel>
</rss>
